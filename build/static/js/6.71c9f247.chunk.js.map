{"version":3,"sources":["hooks/use-http.js","lib/api.js","components/quotes/NoQuotesFound.module.css","components/quotes/QuoteItem.module.css","components/quotes/QuoteList.module.css","components/quotes/NoQuotesFound.js","lib/database.js","components/quotes/QuoteItem.js","components/quotes/QuoteList.js","pages/AllQuotes.js"],"names":["httpReducer","state","action","type","data","error","status","errorMessage","useHttp","requestFunction","pendingState","useReducer","httpState","dispatch","requestHandler","useCallback","requestData","a","responseData","message","FIREBASE_DOMAIN","fetchQuotesHandler","fetch","response","json","quotesData","console","log","ok","Error","key","transformedData","quoteObj","id","push","fetchSingleQuote","quoteId","loadedQuote","sendQuoteHandler","quoteData","method","body","JSON","stringify","headers","addComment","commentData","header","commentId","name","getAllComments","transformedComments","commentObj","text","module","exports","NoQuotesFound","className","classes","noquotes","to","app","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","database","getDatabase","QuoteItem","props","item","author","onClick","onRemove","remove","sx","fontSize","fullscreen","QuoteList","quotes","ascending","history","useHistory","location","useLocation","isSortingAscending","URLSearchParams","search","get","useState","sort","quoteA","quoteB","refreshedQuotes","setRefreshedQuotes","sorting","pathname","list","map","quote","set","ref","filter","AllQuotes","receivedQuotes","useEffect","LoadingSpinner","length"],"mappings":"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","file":"static/js/6.71c9f247.chunk.js","sourcesContent":["/*WHAT TO DO:\n- Import useReducer() hook\n- Initial state of http request- an object with keys (status, data, error)\n- Create httpReducer function and handle 3 different state scenarios: SENDING, SUCCESS, ERROR)\n- Create useHttp hook which takes 2 parameters: requestFunction, pendingState = false as default value\n- Evoke useReducer hook to get back httpState and dispatch function\n- A requestHandler inside useHttp which dispatch() function is called and receive action object {type: \"\", value: anyValue} as argument\n- requestHandler is evoked only when requestFunction varies (now acts as a dependency) (either \"fetching\" or \"sending\")\nso it is wrapped up in useCallback() hook*/\n\nimport { useCallback, useReducer } from \"react\";\n\n//const initialHttpState = { status: null, data: null, error: null };\n\nconst httpReducer = (state, action) => {\n  switch (action.type) {\n    case \"SENDING\":\n      return { data: null, error: null, status: \"pending\" };\n    case \"SUCCESS\":\n      return {\n        data: action.data,\n        error: null,\n        status: \"completed\",\n      };\n    case \"ERROR\":\n      return {\n        data: null,\n        error: action.errorMessage,\n        status: \"completed\",\n      };\n    default:\n      return state;\n  }\n};\n\nexport const useHttp = (requestFunction, pendingState = false) => {\n  //evoke useReducer hook here, returns [httpState, dispatch]\n  const [httpState, dispatch] = useReducer(httpReducer, {\n    status: pendingState ? \"pending\" : null,\n    data: null,\n    error: null,\n  });\n\n  //request function handler\n  const requestHandler = useCallback(\n    async function (requestData) {\n      dispatch({ type: \"SENDING\" });\n      try {\n        const responseData = await requestFunction(requestData);\n        dispatch({ type: \"SUCCESS\", data: responseData });\n      } catch (error) {\n        dispatch({\n          type: \"ERROR\",\n          errorMessage: error.message || \"Something went wrong!\",\n        });\n      }\n      //dependencies array: the requestFunction change depends on what kind of request is concerned\n    },\n    [requestFunction]\n  );\n\n  //useHttp hook returns a goodie bag (an object) of values and methods\n  return { requestHandler, ...httpState };\n};\n","// import { deleteDoc, doc, collection } from \"firebase/firestore\";\n\n//Helper variable\nconst FIREBASE_DOMAIN =\n  \"https://quote-notes-default-rtdb.europe-west1.firebasedatabase.app\";\n\n//Function to get quotes from Firebase database\nexport const fetchQuotesHandler = async () => {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\n  const quotesData = await response.json();\n  console.log(quotesData);\n  if (!response.ok) {\n    throw new Error(quotesData.message || \"Something went wrong!\");\n  }\n  const transformedData = [];\n\n  for (const key in quotesData) {\n    const quoteObj = {\n      id: key,\n      ...quotesData[key],\n    };\n\n    transformedData.push(quoteObj);\n    console.log(transformedData);\n  }\n  return transformedData;\n};\n//Function to fetch a single quote by quoteId\nexport const fetchSingleQuote = async (quoteId) => {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not fetch quote.\");\n  }\n\n  const loadedQuote = {\n    id: quoteId,\n    ...data,\n  };\n\n  return loadedQuote;\n};\n//Function to send quote to Firebase database\nexport const sendQuoteHandler = async (quoteData) => {\n  try {\n    const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\n      method: \"POST\",\n      body: JSON.stringify(quoteData),\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n    const data = await response.json();\n    console.log(data);\n\n    if (!response.ok) {\n      throw new Error(data.message || \"Something went wrong!\");\n    }\n    return null;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\n//Function to add comments to the database\nexport const addComment = async (requestData) => {\n  const response = await fetch(\n    `${FIREBASE_DOMAIN}/comments/${requestData.quoteId}.json`,\n    {\n      method: \"POST\",\n      body: JSON.stringify(requestData.commentData),\n      header: { \"Content-Type\": \"application/json\" },\n    }\n  );\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not add comment.\");\n  }\n  return { commentId: data.name };\n};\n\n//Function to get all comments of a specific quote\nexport const getAllComments = async (quoteId) => {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n  const data = await response.json();\n  console.log(data);\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not get comments\");\n  }\n  const transformedComments = [];\n\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      text: data[key],\n    };\n    console.log(commentObj);\n    transformedComments.push(commentObj);\n  }\n  return transformedComments;\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noquotes\":\"NoQuotesFound_noquotes__3DIYb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"QuoteItem_item__2dOvb\",\"col-right\":\"QuoteItem_col-right__3npJZ\",\"fullscreen\":\"QuoteItem_fullscreen__14fm-\",\"remove\":\"QuoteItem_remove__mRXG6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"QuoteList_list__3pzcl\",\"sorting\":\"QuoteList_sorting__rL6H1\"};","import classes from \"./NoQuotesFound.module.css\";\nimport { Link } from \"react-router-dom\";\nconst NoQuotesFound = () => {\n  return (\n    <div className={classes.noquotes}>\n      <p>No quotes found!</p>\n\n      <Link to=\"/add-a-quote\" className=\"btn\">\n        Add a Quote\n      </Link>\n    </div>\n  );\n};\n\nexport default NoQuotesFound;\n","// Import functions from Firebases SDK\nimport { initializeApp } from \"firebase/app\";\nimport { getDatabase } from \"firebase/database\";\n\n//My app's Firebase configuration detail\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAVz31nXxptJDQCXFhrYkZ-HTEC-tZb5FY\",\n  authDomain: \"quote-notes.firebaseapp.com\",\n  databaseURL:\n    \"https://quote-notes-default-rtdb.europe-west1.firebasedatabase.app\",\n  projectId: \"quote-notes\",\n  storageBucket: \"quote-notes.appspot.com\",\n  messagingSenderId: \"586707582442\",\n  appId: \"1:586707582442:web:43d93b65117e71758a8693\",\n};\n\n//Initialize Firebase database\nconst app = initializeApp(firebaseConfig);\n\nconst database = getDatabase(app);\nconsole.log(database);\nexport default database;\n","import classes from \"./QuoteItem.module.css\";\nimport { Link } from \"react-router-dom\";\nimport FullscreenIcon from \"@mui/icons-material/Fullscreen\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\n// import { removeQuote } from \"../../lib/api\";\nconst QuoteItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <figure>\n        <blockquote>\n          <p>\"{props.text}\"</p>\n        </blockquote>\n        <figcaption>by {props.author}</figcaption>\n      </figure>\n      <div className={classes[\"col-right\"]}>\n        <div onClick={props.onRemove} className={classes.remove}>\n          <DeleteIcon sx={{ fontSize: 32 }} />\n        </div>\n        <div className={classes.fullscreen}>\n          <Link to={`/all-quotes/${props.id}`}>\n            <FullscreenIcon sx={{ fontSize: 32 }} />\n          </Link>\n        </div>\n      </div>\n    </li>\n  );\n};\n\nexport default QuoteItem;\n","import { Fragment, useState } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport database from \"../../lib/database\";\nimport { ref, set } from \"firebase/database\";\nimport QuoteItem from \"./QuoteItem\";\nimport classes from \"./QuoteList.module.css\";\n\n/* useHistory(): allow change page history, manage URL\nuseLocation(): location object gives info of the current loaded page */\n//HELPER FUNCTION\n/*SIDE NOTE: If we click \"Sort Ascending\"-btn, the location object is logged over and over again. \nIt means that wehen we push the page (ending in \"?sort=asc\") the page rerenders */\nconst sortQuotes = (quotes, ascending) => {\n  return quotes.sort((quoteA, quoteB) => {\n    if (ascending) {\n      return quoteA.id > quoteB.id ? 1 : -1;\n    } else {\n      return quoteA.id < quoteB.id ? 1 : -1;\n    }\n  });\n};\n\nconst QuoteList = (props) => {\n  const history = useHistory();\n  const location = useLocation();\n\n  //built-in constructor JS class which can be used in browser\n  const queryParam = new URLSearchParams(location.search);\n\n  const isSortingAscending = queryParam.get(\"sort\") === \"asc\";\n\n  const [refreshedQuotes, setRefreshedQuotes] = useState(\n    sortQuotes(props.quotes, isSortingAscending)\n  );\n  // //sorted quotes\n  // const sorted = sortQuotes(props.quotes, isSortingAscending);\n\n  //change sorting\n  const changeSortingHandler = () => {\n    //update the sharable URL\n    history.push(\n      `${location.pathname}?sort=${isSortingAscending ? \"desc\" : \"asc\"}`\n    );\n  };\n\n  const removeQuote = (id) => {\n    // console.log(ref(database, `quotes/${props.id}`).key);\n    //use database reference to update\n    set(ref(database, `quotes/${id}`), null);\n    //update the UI\n    setRefreshedQuotes(refreshedQuotes.filter((quote) => quote.id !== id));\n  };\n\n  return (\n    <Fragment>\n      <div className={classes.sorting}>\n        <button onClick={changeSortingHandler}>\n          Sort {isSortingAscending ? \"Descending\" : \"Ascending\"}\n        </button>\n      </div>\n      <ul className={classes.list}>\n        {refreshedQuotes.map((quote) => (\n          <QuoteItem\n            onRemove={() => {\n              removeQuote(quote.id);\n            }}\n            key={quote.id}\n            id={quote.id}\n            author={quote.author}\n            text={quote.text}\n          />\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nexport default QuoteList;\n","import { React, useEffect } from \"react\";\nimport NoQuotesFound from \"../components/quotes/NoQuotesFound\";\nimport QuoteList from \"../components/quotes/QuoteList\";\nimport { useHttp } from \"../hooks/use-http\";\nimport { fetchQuotesHandler } from \"../lib/api.js\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\n\n/*IN THIS PAGE, WE IMPLEMENT FETCHING REQUEST & \nRENDERED FETCHED DATA TO QUOTELIST COMPONENT*/\n\nfunction AllQuotes(props) {\n  const {\n    requestHandler,\n    status,\n    data: receivedQuotes,\n    error,\n  } = useHttp(fetchQuotesHandler, true);\n\n  //requestHandler is evoked as a side effect of this page load\n  useEffect(() => {\n    requestHandler();\n  }, [requestHandler]);\n\n  //Load the Loadingspinner if the status === 'pending'\n  if (status === \"pending\") {\n    return (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  //Display error text if there is error\n  if (error) {\n    return <p className=\"centered focused\">{error}</p>;\n  }\n\n  if (\n    status === \"completed\" &&\n    (!receivedQuotes || receivedQuotes.length === 0)\n  ) {\n    return <NoQuotesFound />;\n  }\n  return (\n    <div>\n      <QuoteList quotes={receivedQuotes} />\n    </div>\n  );\n}\n\nexport default AllQuotes;\n"],"sourceRoot":""}