{"version":3,"sources":["components/quotes/HighlightedQuote.js","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","pages/QuoteDetail.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","hooks/use-http.js","lib/api.js","components/quotes/HighlightedQuote.module.css","components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","../node_modules/@mui/icons-material/Favorite.js"],"names":["HighlightedQuote","props","className","classes","quote","text","author","NewCommentForm","commentTextRef","useRef","useHttp","addComment","requestHandler","status","error","onAddedComment","useEffect","content","submitFormHandler","event","preventDefault","commentContent","current","value","commentData","quoteId","LoadingSpinner","form","onSubmit","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useParams","useState","isAddingComment","setIsAddingComment","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","QuoteDetail","favCtx","useContext","FavContext","favList","favorites","match","useRouteMatch","fetchSingleQuote","loadedQuote","path","exact","to","url","push","console","log","setFavCount","prevCount","localStorage","setItem","JSON","stringify","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","apply","_objectSpread2","target","i","arguments","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","httpReducer","state","action","type","errorMessage","requestFunction","pendingState","useReducer","httpState","dispatch","requestData","a","responseData","message","FIREBASE_DOMAIN","fetchQuotesHandler","fetch","response","json","quotesData","ok","Error","transformedData","quoteObj","sendQuoteHandler","quoteData","method","body","headers","header","commentId","name","transformedComments","commentObj","module","exports","_interopRequireDefault","require","default","_createSvgIcon","_jsxRuntime","_default","jsx","d"],"mappings":"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","file":"static/js/3.16840fd0.chunk.js","sourcesContent":["import classes from \"./HighlightedQuote.module.css\";\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>\"{props.text}\"</p>\n      <figcaption>by {props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useRef, useEffect } from \"react\";\nimport classes from \"./NewCommentForm.module.css\";\nimport { useHttp } from \"../../hooks/use-http\";\nimport { addComment } from \"../../lib/api\";\nimport LoadingSpinner from \"../../UI/LoadingSpinner\";\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n  //Evoke custom hook\n  const { requestHandler, status, error } = useHttp(addComment);\n  const { onAddedComment } = props;\n\n  //useEffect\n  useEffect(() => {\n    if (status === \"completed\" && !error) {\n      //fetch all comments if sending succeeds\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n    const commentContent = commentTextRef.current.value;\n\n    // optional: Could validate here\n\n    // send comment to server\n    requestHandler({\n      commentData: commentContent,\n      quoteId: props.quoteId,\n    });\n    //clear text input field\n    commentTextRef.current.value = \"\";\n  };\n  let content;\n  if (status === \"pending\") {\n    content = <LoadingSpinner />;\n  }\n  // if (status === \"completed\") {\n  //   content = <p>Successfully added comment!</p>;\n  // }\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n      {content}\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from \"./CommentItem\";\nimport classes from \"./CommentsList.module.css\";\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from \"react\";\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\nimport { useParams } from \"react-router\";\nimport { useHttp } from \"../../hooks/use-http\";\nimport { getAllComments } from \"../../lib/api\";\nimport CommentList from \"../comments/CommentsList\";\nconst Comments = () => {\n  const { quoteId } = useParams();\n  const [isAddingComment, setIsAddingComment] = useState(false);\n\n  //Evoke custom hook\n  const {\n    requestHandler,\n    status,\n    data: loadedComments,\n    error,\n  } = useHttp(getAllComments);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n  const addedCommentHandler = useCallback(() => {\n    requestHandler(quoteId);\n  }, [requestHandler, quoteId]);\n  //fetch all comments when this component re-render\n  useEffect(() => {\n    requestHandler(quoteId);\n  }, [requestHandler, quoteId]);\n\n  let content;\n  if (status === \"pending\" && !error) {\n    content = (\n      <div className=\"centered\">\n        <p>Loading comments...</p>;\n      </div>\n    );\n  }\n  if (status === \"completed\" && (loadedComments || loadedComments.length > 0)) {\n    content = <CommentList comments={loadedComments} />;\n  }\n  if (!loadedComments || loadedComments.length === 0) {\n    content = (\n      <p className=\"centered\">There are no comments yet! Maybe adding one?</p>\n    );\n  }\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quoteId={quoteId}\n          onAddedComment={addedCommentHandler}\n        />\n      )}\n      {content}\n    </section>\n  );\n};\n\nexport default Comments;\n","import React, { useEffect, useContext } from \"react\";\nimport { useParams, Route, Link, useRouteMatch } from \"react-router-dom\";\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\nimport { FavContext } from \"../context/favorite-context\";\nimport Comments from \"../components/comments/Comments\";\nimport { useHttp } from \"../hooks/use-http\";\nimport { fetchSingleQuote } from \"../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport FavoriteIcon from \"@mui/icons-material/Favorite\";\n\nfunction QuoteDetail(props) {\n  const favCtx = useContext(FavContext);\n  const favList = favCtx.favorites;\n  const addFavHandler = () => {\n    // favCtx.setFavList(() => [...favCtx.favorites, loadedQuote]);\n    favList.push(loadedQuote);\n    console.log(favList);\n    favCtx.setFavCount((prevCount) => prevCount + 1);\n    localStorage.setItem(\"favQuotes\", JSON.stringify(favList));\n  };\n\n  const params = useParams();\n\n  const { quoteId } = params;\n\n  const match = useRouteMatch();\n\n  const {\n    requestHandler,\n    status,\n\n    data: loadedQuote,\n  } = useHttp(fetchSingleQuote, true);\n\n  useEffect(() => {\n    requestHandler(quoteId);\n  }, [requestHandler, quoteId]);\n\n  return (\n    <div>\n      {status === \"pending\" ? (\n        <LoadingSpinner />\n      ) : (\n        <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\n      )}\n\n      <Route path={match.path} exact>\n        <div className=\"actions\">\n          <Link className=\"btn\" to={`${match.url}/comments`}>\n            Leave a comment\n          </Link>\n          <button onClick={addFavHandler} className=\"btn\">\n            <FavoriteIcon /> Add Favorite\n          </button>\n        </div>\n      </Route>\n\n      <Route path={`${match.path}/comments`}>\n        <Comments />\n      </Route>\n    </div>\n  );\n}\n\nexport default QuoteDetail;\n","import defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","/*WHAT TO DO:\n- Import useReducer() hook\n- Initial state of http request- an object with keys (status, data, error)\n- Create httpReducer function and handle 3 different state scenarios: SENDING, SUCCESS, ERROR)\n- Create useHttp hook which takes 2 parameters: requestFunction, pendingState = false as default value\n- Evoke useReducer hook to get back httpState and dispatch function\n- A requestHandler inside useHttp which dispatch() function is called and receive action object {type: \"\", value: anyValue} as argument\n- requestHandler is evoked only when requestFunction varies (now acts as a dependency) (either \"fetching\" or \"sending\")\nso it is wrapped up in useCallback() hook*/\n\nimport { useCallback, useReducer } from \"react\";\n\n//const initialHttpState = { status: null, data: null, error: null };\n\nconst httpReducer = (state, action) => {\n  switch (action.type) {\n    case \"SENDING\":\n      return { data: null, error: null, status: \"pending\" };\n    case \"SUCCESS\":\n      return {\n        data: action.data,\n        error: null,\n        status: \"completed\",\n      };\n    case \"ERROR\":\n      return {\n        data: null,\n        error: action.errorMessage,\n        status: \"completed\",\n      };\n    default:\n      return state;\n  }\n};\n\nexport const useHttp = (requestFunction, pendingState = false) => {\n  //evoke useReducer hook here, returns [httpState, dispatch]\n  const [httpState, dispatch] = useReducer(httpReducer, {\n    status: pendingState ? \"pending\" : null,\n    data: null,\n    error: null,\n  });\n\n  //request function handler\n  const requestHandler = useCallback(\n    async function (requestData) {\n      dispatch({ type: \"SENDING\" });\n      try {\n        const responseData = await requestFunction(requestData);\n        dispatch({ type: \"SUCCESS\", data: responseData });\n      } catch (error) {\n        dispatch({\n          type: \"ERROR\",\n          errorMessage: error.message || \"Something went wrong!\",\n        });\n      }\n      //dependencies array: the requestFunction change depends on what kind of request is concerned\n    },\n    [requestFunction]\n  );\n\n  //useHttp hook returns a goodie bag (an object) of values and methods\n  return { requestHandler, ...httpState };\n};\n","// import { deleteDoc, doc, collection } from \"firebase/firestore\";\n\n//Helper variable\nconst FIREBASE_DOMAIN =\n  \"https://quote-notes-default-rtdb.europe-west1.firebasedatabase.app\";\n\n//Function to get quotes from Firebase database\nexport const fetchQuotesHandler = async () => {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\n  const quotesData = await response.json();\n\n  if (!response.ok) {\n    throw new Error(quotesData.message || \"Something went wrong!\");\n  }\n  const transformedData = [];\n\n  for (const key in quotesData) {\n    const quoteObj = {\n      id: key,\n      ...quotesData[key],\n    };\n\n    transformedData.push(quoteObj);\n  }\n  return transformedData;\n};\n//Function to fetch a single quote by quoteId\nexport const fetchSingleQuote = async (quoteId) => {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not fetch quote.\");\n  }\n\n  const loadedQuote = {\n    id: quoteId,\n    ...data,\n  };\n\n  return loadedQuote;\n};\n//Function to send quote to Firebase database\nexport const sendQuoteHandler = async (quoteData) => {\n  try {\n    const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\n      method: \"POST\",\n      body: JSON.stringify(quoteData),\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n    const data = await response.json();\n    console.log(data);\n\n    if (!response.ok) {\n      throw new Error(data.message || \"Something went wrong!\");\n    }\n    return null;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\n//Function to add comments to the database\nexport const addComment = async (requestData) => {\n  const response = await fetch(\n    `${FIREBASE_DOMAIN}/comments/${requestData.quoteId}.json`,\n    {\n      method: \"POST\",\n      body: JSON.stringify(requestData.commentData),\n      header: { \"Content-Type\": \"application/json\" },\n    }\n  );\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not add comment.\");\n  }\n  return { commentId: data.name };\n};\n\n//Function to get all comments of a specific quote\nexport const getAllComments = async (quoteId) => {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n  const data = await response.json();\n  console.log(data);\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not get comments\");\n  }\n  const transformedComments = [];\n\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      text: data[key],\n    };\n    console.log(commentObj);\n    transformedComments.push(commentObj);\n  }\n  return transformedComments;\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__nE9T6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__iZX-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2Te8b\",\"loading\":\"NewCommentForm_loading__2veC2\",\"control\":\"NewCommentForm_control__3NVeP\",\"actions\":\"NewCommentForm_actions__2fwWP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__24mbD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__valp0\"};","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"m12 21.35-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z\"\n}), 'Favorite');\n\nexports.default = _default;"],"sourceRoot":""}