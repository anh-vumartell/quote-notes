{"version":3,"sources":["components/quotes/NoQuotesFound.js","components/quotes/QuoteList.js","pages/AllQuotes.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","hooks/use-http.js","lib/api.js","components/quotes/NoQuotesFound.module.css","components/quotes/QuoteList.module.css"],"names":["NoQuotesFound","className","classes","noquotes","to","QuoteList","props","quotes","ascending","history","useHistory","location","useLocation","isSortingAscending","URLSearchParams","search","get","useState","sort","quoteA","quoteB","id","refreshedQuotes","setRefreshedQuotes","sorting","onClick","push","pathname","list","map","quote","QuoteItem","onRemove","set","ref","database","filter","author","text","createdAt","AllQuotes","useHttp","fetchQuotesHandler","requestHandler","status","receivedQuotes","data","error","useEffect","LoadingSpinner","length","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","enumerable","apply","_objectSpread2","target","i","arguments","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","httpReducer","state","action","type","errorMessage","requestFunction","pendingState","useReducer","httpState","dispatch","useCallback","requestData","a","responseData","message","FIREBASE_DOMAIN","fetch","response","json","quotesData","ok","Error","transformedData","quoteObj","fetchSingleQuote","quoteId","loadedQuote","sendQuoteHandler","quoteData","method","body","JSON","stringify","headers","console","log","addComment","commentData","header","commentId","name","getAllComments","transformedComments","commentObj","module","exports"],"mappings":"sLAceA,EAZO,WACpB,OACE,sBAAKC,UAAWC,IAAQC,SAAxB,UACE,iDAEA,cAAC,IAAD,CAAMC,GAAG,eAAeH,UAAU,MAAlC,6B,wDCuESI,EAvDG,SAACC,GACjB,IAXkBC,EAAQC,EAWpBC,EAAUC,cACVC,EAAWC,cAKXC,EAAgD,QAFnC,IAAIC,gBAAgBH,EAASI,QAEVC,IAAI,QAE1C,EAA8CC,oBAnB5BV,EAoBLD,EAAMC,OApBOC,EAoBCK,EAnBpBN,EAAOW,MAAK,SAACC,EAAQC,GAC1B,OAAIZ,EACKW,EAAOE,GAAKD,EAAOC,GAAK,GAAK,EAE7BF,EAAOE,GAAKD,EAAOC,GAAK,GAAK,OAcxC,mBAAOC,EAAP,KAAwBC,EAAxB,KAqBA,OACE,eAAC,WAAD,WACE,qBAAKtB,UAAWC,IAAQsB,QAAxB,SACE,yBAAQvB,UAAU,eAAewB,QAlBV,WAE3BhB,EAAQiB,KAAR,UACKf,EAASgB,SADd,iBAC+Bd,EAAqB,OAAS,SAezD,kBACQA,EAAqB,aAAe,iBAG9C,oBAAIZ,UAAWC,IAAQ0B,KAAvB,SACGN,EAAgBO,KAAI,SAACC,GAAD,OACnB,cAACC,EAAA,EAAD,CACEC,SAAU,WAlBA,IAACX,IAmBGS,EAAMT,GAhB5BY,YAAIC,YAAIC,IAAD,iBAAqBd,IAAO,MAEnCE,EAAmBD,EAAgBc,QAAO,SAACN,GAAD,OAAWA,EAAMT,KAAOA,OAiB1DA,GAAIS,EAAMT,GACVgB,OAAQP,EAAMO,OACdC,KAAMR,EAAMQ,KACZC,UAAWT,EAAMS,WAJZT,EAAMT,a,wBCZRmB,UA7Cf,SAAmBlC,GACjB,MAKImC,YAAQC,KAAoB,GAJ9BC,EADF,EACEA,eACAC,EAFF,EAEEA,OACMC,EAHR,EAGEC,KACAC,EAJF,EAIEA,MASF,OALAC,qBAAU,WACRL,MACC,CAACA,IAGW,YAAXC,EAEA,qBAAK3C,UAAU,WAAf,SACE,cAACgD,EAAA,EAAD,MAMFF,EACK,mBAAG9C,UAAU,mBAAb,SAAiC8C,IAI7B,cAAXH,GACEC,GAA4C,IAA1BA,EAAeK,OAa9B,cAAC,EAAD,CAAW3C,OAAQsC,IAXjB,cAAC,EAAD,M,gCCxCX,6CAEA,SAASM,EAAQC,EAAQC,GACvB,IAAIC,EAAOC,OAAOD,KAAKF,GAEvB,GAAIG,OAAOC,sBAAuB,CAChC,IAAIC,EAAUF,OAAOC,sBAAsBJ,GACvCC,IAAgBI,EAAUA,EAAQrB,QAAO,SAAUsB,GACrD,OAAOH,OAAOI,yBAAyBP,EAAQM,GAAKE,eAEtDN,EAAK5B,KAAKmC,MAAMP,EAAMG,GAGxB,OAAOH,EAGM,SAASQ,EAAeC,GACrC,IAAK,IAAIC,EAAI,EAAGA,EAAIC,UAAUf,OAAQc,IAAK,CACzC,IAAIE,EAAyB,MAAhBD,UAAUD,GAAaC,UAAUD,GAAK,GAE/CA,EAAI,EACNb,EAAQI,OAAOW,IAAS,GAAMC,SAAQ,SAAUC,GAC9C,YAAeL,EAAQK,EAAKF,EAAOE,OAE5Bb,OAAOc,0BAChBd,OAAOe,iBAAiBP,EAAQR,OAAOc,0BAA0BH,IAEjEf,EAAQI,OAAOW,IAASC,SAAQ,SAAUC,GACxCb,OAAOgB,eAAeR,EAAQK,EAAKb,OAAOI,yBAAyBO,EAAQE,OAKjF,OAAOL,I,qHCnBHS,EAAc,SAACC,EAAOC,GAC1B,OAAQA,EAAOC,MACb,IAAK,UACH,MAAO,CAAE7B,KAAM,KAAMC,MAAO,KAAMH,OAAQ,WAC5C,IAAK,UACH,MAAO,CACLE,KAAM4B,EAAO5B,KACbC,MAAO,KACPH,OAAQ,aAEZ,IAAK,QACH,MAAO,CACLE,KAAM,KACNC,MAAO2B,EAAOE,aACdhC,OAAQ,aAEZ,QACE,OAAO6B,IAIAhC,EAAU,SAACoC,GAA2C,IAA1BC,EAAyB,wDAEhE,EAA8BC,qBAAWP,EAAa,CACpD5B,OAAQkC,EAAe,UAAY,KACnChC,KAAM,KACNC,MAAO,OAHT,mBAAOiC,EAAP,KAAkBC,EAAlB,KAOMtC,EAAiBuC,sBAAW,uCAChC,WAAgBC,GAAhB,eAAAC,EAAA,6DACEH,EAAS,CAAEN,KAAM,YADnB,kBAG+BE,EAAgBM,GAH/C,OAGUE,EAHV,OAIIJ,EAAS,CAAEN,KAAM,UAAW7B,KAAMuC,IAJtC,gDAMIJ,EAAS,CACPN,KAAM,QACNC,aAAc,KAAMU,SAAW,0BARrC,yDADgC,sDAchC,CAACT,IAIH,OAAO,aAAElC,kBAAmBqC,K,+OC3DxBO,EACJ,qEAGW7C,EAAkB,uCAAG,oCAAA0C,EAAA,sEACTI,MAAM,GAAD,OAAID,EAAJ,iBADI,cAC1BE,EAD0B,gBAEPA,EAASC,OAFF,UAE1BC,EAF0B,OAI3BF,EAASG,GAJkB,sBAKxB,IAAIC,MAAMF,EAAWL,SAAW,yBALR,OAShC,IAAWlB,KAFL0B,EAAkB,GAENH,EACVI,EADsB,aAE1B1E,GAAI+C,GACDuB,EAAWvB,IAGhB0B,EAAgBpE,KAAKqE,GAfS,yBAiBzBD,GAjByB,4CAAH,qDAoBlBE,EAAgB,uCAAG,WAAOC,GAAP,mBAAAb,EAAA,sEACPI,MAAM,GAAD,OAAID,EAAJ,mBAA8BU,EAA9B,UADE,cACxBR,EADwB,gBAEXA,EAASC,OAFE,UAExB5C,EAFwB,OAIzB2C,EAASG,GAJgB,sBAKtB,IAAIC,MAAM/C,EAAKwC,SAAW,0BALJ,cAQxBY,EARwB,aAS5B7E,GAAI4E,GACDnD,GAVyB,kBAavBoD,GAbuB,4CAAH,sDAgBhBC,EAAgB,uCAAG,WAAOC,GAAP,iBAAAhB,EAAA,+EAELI,MAAM,GAAD,OAAID,EAAJ,gBAAmC,CAC7Dc,OAAQ,OACRC,KAAMC,KAAKC,UAAUJ,GACrBK,QAAS,CAAE,eAAgB,sBALD,cAEtBhB,EAFsB,gBAOTA,EAASC,OAPA,UAOtB5C,EAPsB,OAQ5B4D,QAAQC,IAAI7D,GAEP2C,EAASG,GAVc,uBAWpB,IAAIC,MAAM/C,EAAKwC,SAAW,yBAXN,iCAarB,MAbqB,kCAe5BoB,QAAQC,IAAI,KAAMrB,SAfU,0DAAH,sDAoBhBsB,EAAU,uCAAG,WAAOzB,GAAP,iBAAAC,EAAA,sEACDI,MAAM,GAAD,OACvBD,EADuB,qBACKJ,EAAYc,QADjB,SAE1B,CACEI,OAAQ,OACRC,KAAMC,KAAKC,UAAUrB,EAAY0B,aACjCC,OAAQ,CAAE,eAAgB,sBANN,cAClBrB,EADkB,gBASLA,EAASC,OATJ,UASlB5C,EATkB,OAWnB2C,EAASG,GAXU,sBAYhB,IAAIC,MAAM/C,EAAKwC,SAAW,0BAZV,gCAcjB,CAAEyB,UAAWjE,EAAKkE,OAdD,2CAAH,sDAkBVC,EAAc,uCAAG,WAAOhB,GAAP,uBAAAb,EAAA,sEACLI,MAAM,GAAD,OAAID,EAAJ,qBAAgCU,EAAhC,UADA,cACtBR,EADsB,gBAETA,EAASC,OAFA,UAEtB5C,EAFsB,OAG5B4D,QAAQC,IAAI7D,GACP2C,EAASG,GAJc,sBAKpB,IAAIC,MAAM/C,EAAKwC,SAAW,0BALN,OAS5B,IAAWlB,KAFL8C,EAAsB,GAEVpE,EACVqE,EAAa,CACjB9F,GAAI+C,EACJ9B,KAAMQ,EAAKsB,IAEbsC,QAAQC,IAAIQ,GACZD,EAAoBxF,KAAKyF,GAfC,yBAiBrBD,GAjBqB,4CAAH,uD,mBChF3BE,EAAOC,QAAU,CAAC,SAAW,kC,mBCA7BD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU","file":"static/js/5.0d3c86ac.chunk.js","sourcesContent":["import classes from \"./NoQuotesFound.module.css\";\nimport { Link } from \"react-router-dom\";\nconst NoQuotesFound = () => {\n  return (\n    <div className={classes.noquotes}>\n      <p>No quotes found!</p>\n\n      <Link to=\"/add-a-quote\" className=\"btn\">\n        Add a Quote\n      </Link>\n    </div>\n  );\n};\n\nexport default NoQuotesFound;\n","import { Fragment, useState } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport database from \"../../lib/firebase\";\n// import app from \"../../lib/firebase\";\nimport { ref, set } from \"firebase/database\";\nimport QuoteItem from \"./QuoteItem\";\nimport classes from \"./QuoteList.module.css\";\n\n/* useHistory(): allow change page history, manage URL\nuseLocation(): location object gives info of the current loaded page */\n//HELPER FUNCTION\n/*SIDE NOTE: If we click \"Sort Ascending\"-btn, the location object is logged over and over again. \nIt means that wehen we push the page (ending in \"?sort=asc\") the page rerenders */\nconst sortQuotes = (quotes, ascending) => {\n  return quotes.sort((quoteA, quoteB) => {\n    if (ascending) {\n      return quoteA.id > quoteB.id ? 1 : -1;\n    } else {\n      return quoteA.id < quoteB.id ? 1 : -1;\n    }\n  });\n};\n\nconst QuoteList = (props) => {\n  const history = useHistory();\n  const location = useLocation();\n\n  //built-in constructor JS class which can be used in browser\n  const queryParam = new URLSearchParams(location.search);\n\n  const isSortingAscending = queryParam.get(\"sort\") === \"asc\";\n\n  const [refreshedQuotes, setRefreshedQuotes] = useState(\n    sortQuotes(props.quotes, isSortingAscending)\n  );\n  //sorted quotes\n  // const sorted = sortQuotes(props.quotes, isSortingAscending);\n\n  const changeSortingHandler = () => {\n    //update the sharable URL\n    history.push(\n      `${location.pathname}?sort=${isSortingAscending ? \"desc\" : \"asc\"}`\n    );\n  };\n\n  const removeQuote = (id) => {\n    // console.log(ref(database, `quotes/${props.id}`).key);\n    //use database reference to update\n    set(ref(database, `quotes/${id}`), null);\n    //update the UI\n    setRefreshedQuotes(refreshedQuotes.filter((quote) => quote.id !== id));\n  };\n\n  return (\n    <Fragment>\n      <div className={classes.sorting}>\n        <button className=\"btn--minimal\" onClick={changeSortingHandler}>\n          Sort {isSortingAscending ? \"Descending\" : \"Ascending\"}\n        </button>\n      </div>\n      <ul className={classes.list}>\n        {refreshedQuotes.map((quote) => (\n          <QuoteItem\n            onRemove={() => {\n              removeQuote(quote.id);\n            }}\n            key={quote.id}\n            id={quote.id}\n            author={quote.author}\n            text={quote.text}\n            createdAt={quote.createdAt}\n          />\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nexport default QuoteList;\n","import { React, useEffect } from \"react\";\nimport NoQuotesFound from \"../components/quotes/NoQuotesFound\";\nimport QuoteList from \"../components/quotes/QuoteList\";\nimport { useHttp } from \"../hooks/use-http\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport { fetchQuotesHandler } from \"../lib/api\";\n/*IN THIS PAGE, WE IMPLEMENT FETCHING REQUEST & \nRENDERED FETCHED DATA TO QUOTELIST COMPONENT*/\n\nfunction AllQuotes(props) {\n  const {\n    requestHandler,\n    status,\n    data: receivedQuotes,\n    error,\n  } = useHttp(fetchQuotesHandler, true);\n\n  //requestHandler is evoked as a side effect of this page load\n  useEffect(() => {\n    requestHandler();\n  }, [requestHandler]);\n\n  //Load the Loadingspinner if the status === 'pending'\n  if (status === \"pending\") {\n    return (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  //Display error text if there is error\n  if (error) {\n    return <p className=\"centered focused\">{error}</p>;\n  }\n\n  if (\n    status === \"completed\" &&\n    (!receivedQuotes || receivedQuotes.length === 0)\n  ) {\n    return <NoQuotesFound />;\n  }\n  // const fetchQuotesHandler = useCallback(() => {\n  //   const arr = fetchAllQuotes();\n  //   setQuotes(arr);\n  // });\n\n  // useEffect(() => {\n  //   fetchQuotesHandler();\n  // }, []);\n\n  return <QuoteList quotes={receivedQuotes} />;\n}\n\nexport default AllQuotes;\n","import defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","/*WHAT TO DO:\n- Import useReducer() hook\n- Initial state of http request- an object with keys (status, data, error)\n- Create httpReducer function and handle 3 different state scenarios: SENDING, SUCCESS, ERROR)\n- Create useHttp hook which takes 2 parameters: requestFunction, pendingState = false as default value\n- Evoke useReducer hook to get back httpState and dispatch function\n- A requestHandler inside useHttp which dispatch() function is called and receive action object {type: \"\", value: anyValue} as argument\n- requestHandler is evoked only when requestFunction varies (now acts as a dependency) (either \"fetching\" or \"sending\")\nso it is wrapped up in useCallback() hook*/\n\nimport { useCallback, useReducer } from \"react\";\n\n//const initialHttpState = { status: null, data: null, error: null };\n\nconst httpReducer = (state, action) => {\n  switch (action.type) {\n    case \"SENDING\":\n      return { data: null, error: null, status: \"pending\" };\n    case \"SUCCESS\":\n      return {\n        data: action.data,\n        error: null,\n        status: \"completed\",\n      };\n    case \"ERROR\":\n      return {\n        data: null,\n        error: action.errorMessage,\n        status: \"completed\",\n      };\n    default:\n      return state;\n  }\n};\n\nexport const useHttp = (requestFunction, pendingState = false) => {\n  //evoke useReducer hook here, returns [httpState, dispatch]\n  const [httpState, dispatch] = useReducer(httpReducer, {\n    status: pendingState ? \"pending\" : null,\n    data: null,\n    error: null,\n  });\n\n  //request function handler\n  const requestHandler = useCallback(\n    async function (requestData) {\n      dispatch({ type: \"SENDING\" });\n      try {\n        const responseData = await requestFunction(requestData);\n        dispatch({ type: \"SUCCESS\", data: responseData });\n      } catch (error) {\n        dispatch({\n          type: \"ERROR\",\n          errorMessage: error.message || \"Something went wrong!\",\n        });\n      }\n      //dependencies array: the requestFunction change depends on what kind of request is concerned\n    },\n    [requestFunction]\n  );\n\n  //useHttp hook returns a goodie bag (an object) of values and methods\n  return { requestHandler, ...httpState };\n};\n","// import { deleteDoc, doc, collection } from \"firebase/firestore\";\n\n//Helper variable\nconst FIREBASE_DOMAIN =\n  \"https://quote-notes-default-rtdb.europe-west1.firebasedatabase.app\";\n\n//Function to get quotes from Firebase database\nexport const fetchQuotesHandler = async () => {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\n  const quotesData = await response.json();\n\n  if (!response.ok) {\n    throw new Error(quotesData.message || \"Something went wrong!\");\n  }\n  const transformedData = [];\n\n  for (const key in quotesData) {\n    const quoteObj = {\n      id: key,\n      ...quotesData[key],\n    };\n\n    transformedData.push(quoteObj);\n  }\n  return transformedData;\n};\n//Function to fetch a single quote by quoteId\nexport const fetchSingleQuote = async (quoteId) => {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not fetch quote.\");\n  }\n\n  const loadedQuote = {\n    id: quoteId,\n    ...data,\n  };\n\n  return loadedQuote;\n};\n//Function to send quote to Firebase database\nexport const sendQuoteHandler = async (quoteData) => {\n  try {\n    const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\n      method: \"POST\",\n      body: JSON.stringify(quoteData),\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n    const data = await response.json();\n    console.log(data);\n\n    if (!response.ok) {\n      throw new Error(data.message || \"Something went wrong!\");\n    }\n    return null;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\n//Function to add comments to the database\nexport const addComment = async (requestData) => {\n  const response = await fetch(\n    `${FIREBASE_DOMAIN}/comments/${requestData.quoteId}.json`,\n    {\n      method: \"POST\",\n      body: JSON.stringify(requestData.commentData),\n      header: { \"Content-Type\": \"application/json\" },\n    }\n  );\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not add comment.\");\n  }\n  return { commentId: data.name };\n};\n\n//Function to get all comments of a specific quote\nexport const getAllComments = async (quoteId) => {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n  const data = await response.json();\n  console.log(data);\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not get comments\");\n  }\n  const transformedComments = [];\n\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      text: data[key],\n    };\n    console.log(commentObj);\n    transformedComments.push(commentObj);\n  }\n  return transformedComments;\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noquotes\":\"NoQuotesFound_noquotes__3DIYb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"QuoteList_list__3pzcl\",\"sorting\":\"QuoteList_sorting__rL6H1\"};"],"sourceRoot":""}